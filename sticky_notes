import sys

from database import Note
from PySide6.QtWidgets import (QApplication, QSystemTrayIcon, QTextEdit, QHBoxLayout, 
 QVBoxLayout, QWidget, QPushButton, QMenu)
from PySide6.QtCore import Qt
from PySide6.QtGui import QIcon, QAction

app = QApplication(sys.argv)

active_notewindows = {}

class StickyNotes(QWidget):
    def __init__(self, note=None):
        super().__init__()
        self.app = app
        self.setWindowFlags(
            self.windowFlags()
            | Qt.WindowType.FramelessWindowHint
            | Qt.WindowType.WindowStaysOnTopHint
        )
        self.setStyleSheet("background: yellow; color: black; border: 0; font-size: 12px")
        layout = QVBoxLayout()
        
        buttons = QHBoxLayout()
        self.close_btn = QPushButton("x")
        self.close_btn.setStyleSheet("font-weight: bold; font-size: 25px: width: 25px; height: 25px")
        self.close_btn.setCursor(Qt.CursorShape.PointingHandCursor)
        self.close_btn.clicked.connect(self.close)
        buttons.addStretch()
        buttons.addWidget(self.close_btn)
        layout.addLayout(buttons)

        self.text = QTextEdit() 
        layout.addWidget(self.text)
        self.setLayout(layout)

        active_notewindows[id(self)] = self


    def mousePressEvent(self, e):
        self.prvs_pst = e.globalPosition()

    def mouseMoveEvent(self, e):
        delta = e.globalPosition() - self.prvs_pst
        self.move(self.x() + delta.x(), self.y() + delta.y())
        self.prvs_pst = e.globalPosition()

def create_notewindow():
    note = StickyNotes()
    note.show()

icon = QIcon("sticky_note2.png")

tray = QSystemTrayIcon()
tray.setIcon(icon)
tray.setVisible(True)

def handle_tray_clicked(reason):
    if(
        QSystemTrayIcon.ActivationReason(reason) 
        == QSystemTrayIcon.ActivationReason.Trigger
    ):
        create_notewindow()

tray.activated.connect(handle_tray_clicked)

app.setQuitOnLastWindowClosed(False)

menu = QMenu()
add_note_action = QAction("Add note")
add_note_action.triggered.connect(create_notewindow)
menu.addAction(add_note_action)

quit_action = QAction("Quit")
quit_action.triggered.connect(app.quit)
menu.addAction(quit_action)

tray.setContextMenu(menu)

app.exec()
